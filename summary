本文章主要是为了记录这段时间处理boost::python一些问题。

python语言开发效率比较高，但是性能比较差，但是c与c++与此
相反。在实际环境中，我需要利用c++的高效性去处理实际计算，而
python只负责前端接受请求并调用后台程序，主要计算交给c++或c
程序。因此如何去用python调c++/c成了一个大问题，cytpes可以比较好
的调用c与c++，但是其数据交互十分的不方便，因此我在查阅资料后发现
boost库中的boost::python是一个很好的工具。其中的boost::python::list
以及str，dict，tuple，分别对应着python中的list，string，dict，tuple而且
具体的操作也很类似，这使得数据交互十分的方便。

但是在后续的实际使用时发现由于python语言对多线程的支持不是太完善（其实是
很坑爹的GIL机制）使得多线程无法充分利用多核，因此我在实际的c++程序加入了
释放GIL的类，但是却导致了另一个问题，多线程调用c++时python的GC可能会将
c++申请的内存给回收掉，或者出现莫名奇妙的段错误，这个问题我一直没有解决。

因此决定放弃这种方法，换cython去改写，这个不会导致莫名奇妙的错误。